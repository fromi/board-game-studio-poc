@import "../../util/hand";
@import "../variables";

$deck-top-card-shift-y: ($decks-max-cards-displayed - 1) * $decks-card-shift-y;

.not-alone.creature .player-hand {
  bottom: $creature-hand-bottom-margin;
}

.not-alone:not(.creature) .player-hand {
  bottom: $hunted-hand-bottom-margin;
}

.not-alone .player-hand {
  position: absolute;
  width: $card-width;
  height: $card-height;
  left: calc(50vw - #{$card-width / 2});

  .card .face {
    box-shadow: 0 0 0.1vh white, -0.2vh 0.2vh 0.4vh black;
  }

  @include handOfCards($card-width, $card-height, 15);

  &.playing-place-card {
    transition: transform $playing-place-card-animation ease-in-out;
  }
  &.taking-back-place {
    transition: transform $taking-back-place-animation ease-in-out;
  }

  .drawing {
    .hand-item-position {
      animation: from-transform-none $draw-card-animation ease-in-out both, to-z-index-0 $draw-card-animation ease-in-out both;
      animation-delay: inherit;

      .survival-card {
        animation: drawing-survival-card $draw-card-animation ease-in-out both;
        animation-delay: inherit;
      }

      .hunt-card {
        animation: drawing-hunt-card $draw-card-animation ease-in-out both;
        animation-delay: inherit;
      }
    }

    @for $i from 1 through 3 {
      &:nth-last-child(#{$i}) .hand-item-position {
        z-index: $i;
      }
    }
  }

  .draggable .place-card, .draggable .survival-card {
    box-shadow: 0 0 0.1vh 0.1vh deepskyblue;
    outline: 1px solid transparent;

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      box-shadow: 0 0 0.8vh 0.2vh deepskyblue;
      animation: opacity 1.5s ease-in-out infinite alternate;
      outline: 1px solid transparent;
      border-radius: 1vh;
    }
  }

  .dragging {
    .card {
      opacity: 0.8;
    }
  }

  .being-played .hand-item-position {
    z-index: 1;
    transform: none !important;

    .place-card {
      transition: transform $playing-place-card-animation ease-in-out;
      transform: translateX($artemia-width / 2 + $default-margin + $card-width / 2) translateY(3vh) rotateY(-180deg);
    }
  }

  .taking-back-played-place .hand-item-position {
    animation: from-transform-none $taking-back-place-animation ease-in-out both;
    .place-card {
      animation: taking-back-played-place $taking-back-place-animation ease-in-out;
    }
  }

  .taking-back-discarded-place .hand-item-position {
    animation: from-transform-none $taking-back-place-animation ease-in-out both;
    .place-card {
      animation: taking-back-discarded-place $taking-back-place-animation ease-in-out;
    }
  }
}

@keyframes opacity {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes drawing-hunt-card {
  from {
    transform: translate(calc(#{$card-width / 2 + $default-margin} - 50vw), $creature-hand-bottom-margin - $default-margin - $deck-top-card-shift-y) rotateY(-180deg);
  }
}

@keyframes drawing-survival-card {
  from {
    transform: translate(calc(50vw - #{$card-width / 2 + $default-margin + $decks-card-shift-x * $decks-max-cards-displayed}),
            $hunted-hand-bottom-margin - $default-margin - $deck-top-card-shift-y) rotateY(-180deg);
  }
}

@keyframes taking-back-played-place {
  from {
    transform: translateX($artemia-width / 2 + $default-margin + $card-width / 2) translateY(3vh);
  }
}

@keyframes taking-back-discarded-place {
  from {
    transform: translateX(calc(#{$board-height + $default-margin + $card-width / 2} - 50vw)) translateY(2vh);
  }
}